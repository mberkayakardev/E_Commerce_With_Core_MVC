// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrendMusic.ECommerce.DataAccess.EntityFramework.Concrete.Contexts;

#nullable disable

namespace TrendMusic.ECommerce.DataAccess.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231225140509_addedseedproduct")]
    partial class addedseedproduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Blues",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7961),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7961)
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Klasik Müzik",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7963),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7964)
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Halk Müzikleri",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7965),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7966)
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Elektronik Müzik",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7967),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7968)
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Hip - Hop",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7969),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7969)
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Cazz ",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7970),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7970)
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Pop ",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7971),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7972)
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Rock",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7973),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7973)
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Çocuk Müzikleri ",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7974),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7975)
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Dini Müzik Türleri",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7976),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7976)
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Enstrümantal",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7977),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7978)
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Tüm Kategoriler",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7979),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(7979)
                        });
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6dffff8-f82e-4810-aa0f-40e27c551fdf",
                            Email = "NesetErtas@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "NesetErtas",
                            PasswordHash = "AQAAAAIAAYagAAAAEEQLxxmv1E4TFQTU1MQXf3EI7HsAT9CmfvTuaFdOJDRedkHx7M4aJW+uQUmk60kKfQ==",
                            PhoneNumber = "+90 555 44 33 22",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Neşet Ertaş"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90fbfa52-1c9c-41bd-8835-c8872b0cacf0",
                            Email = "berkayakar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BerkayAkar",
                            PasswordHash = "AQAAAAIAAYagAAAAEFRdrA3gELreAwIC3oRvwHE4+UbXDfV36R7svTC/wBodtvOivlZWv5UrmVCfoJ0tOw==",
                            PhoneNumber = "+90 534 541 34 10",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Berkay Akar"
                        });
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.MusicEntities.ProductCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProductDemoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductFullPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8128),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8129)
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8131),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8131)
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8133),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8133)
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8134),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8135)
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8136),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8137)
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8138),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8138)
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8140),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8140)
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8142),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8142)
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8143),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8144)
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8145),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8146)
                        },
                        new
                        {
                            Id = 11,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8147),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8147)
                        },
                        new
                        {
                            Id = 12,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8149),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8149)
                        },
                        new
                        {
                            Id = 13,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8150),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8151)
                        },
                        new
                        {
                            Id = 14,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8152),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8153)
                        },
                        new
                        {
                            Id = 15,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8154),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8154)
                        },
                        new
                        {
                            Id = 16,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8156),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8156)
                        },
                        new
                        {
                            Id = 17,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8158),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8158)
                        },
                        new
                        {
                            Id = 18,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8159),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8160)
                        },
                        new
                        {
                            Id = 19,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8161),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8162)
                        },
                        new
                        {
                            Id = 20,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8163),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 5, 8, 999, DateTimeKind.Local).AddTicks(8163)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.MusicEntities.ProductCategories", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Product", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", "ProductOwner")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductOwner");
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
