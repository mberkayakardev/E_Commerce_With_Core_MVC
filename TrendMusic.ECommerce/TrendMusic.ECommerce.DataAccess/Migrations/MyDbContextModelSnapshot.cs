// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrendMusic.ECommerce.DataAccess.EntityFramework.Concrete.Contexts;

#nullable disable

namespace TrendMusic.ECommerce.DataAccess.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Blues",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2134),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2136)
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Klasik Müzik",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2138),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2139)
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Halk Müzikleri",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2140),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2141)
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Elektronik Müzik",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2142),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2142)
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Hip - Hop",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2143),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2144)
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Cazz ",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2145),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2145)
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Pop ",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2146),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2147)
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Rock",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2148),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2148)
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Çocuk Müzikleri ",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2149),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2149)
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Dini Müzik Türleri",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2150),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2151)
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Enstrümantal",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2152),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2152)
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Tüm Kategoriler",
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2153),
                            IsActive = true,
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2154)
                        });
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0728d577-885e-4a3e-b4f6-d273f6d7e2af",
                            Email = "NesetErtas@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "NesetErtas",
                            PasswordHash = "AQAAAAIAAYagAAAAEFFZMDo6kdfqXD0scDzACVIdDTEC0ETy80bZ2JAe5pfp6O5Oiq1mSt8UrW7RPnv5OA==",
                            PhoneNumber = "+90 555 44 33 22",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Neşet Ertaş"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bdd9785-d15e-49d2-9e06-f2327412d035",
                            Email = "berkayakar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BerkayAkar",
                            PasswordHash = "AQAAAAIAAYagAAAAEEmHAOkh3WW6Oz9kqItecPXcVB+bgC66/EWoNGvcYg4U6zQCGqC3Wh02gE7yulrPPw==",
                            PhoneNumber = "+90 534 541 34 10",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Berkay Akar"
                        });
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.MusicEntities.ProductCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProductDemoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductFullPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2286),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductImageUrl = "https://upload.wikimedia.org/wikipedia/tr/7/7f/Bomba_Plak.jpg",
                            ProductName = "BombaPlak",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2286)
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2289),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Massaka Syndikat Album",
                            ProductFullPath = "Fullpath1",
                            ProductImageUrl = "https://scontent.fist13-1.fna.fbcdn.net/v/t1.6435-9/45627140_10157205667499026_6559733147800436736_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=c2f564&_nc_ohc=ymRuS6Qp4-YAX8Nnj0n&_nc_ht=scontent.fist13-1.fna&oh=00_AfB-VpCKAUzOsD8v3YPh1DxJeroAmsM8FO5redNH3It59Q&oe=65B10756",
                            ProductName = "Massaka & Syndikat",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2290)
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2292),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Kağıt Kesikleri ",
                            ProductFullPath = "Fullpath1",
                            ProductImageUrl = "https://i.ytimg.com/vi/MPz_t5yvSGE/maxresdefault.jpg",
                            ProductName = "Sagopa Kajmer - Bla Bla",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2292)
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2294),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "defkhan 59 Albüm",
                            ProductFullPath = "Fullpath1",
                            ProductImageUrl = "https://i.scdn.co/image/ab67616d0000b273ae03d01bd0a03f28f1866593",
                            ProductName = "Defkhan 59 ",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2294)
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2296),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Sagopa Neyim Varki Rapten Gayri ?  ",
                            ProductFullPath = "Fullpath1",
                            ProductImageUrl = "https://img-s1.onedio.com/id-5cb6fe1f4d1e71621e1d9a9c/rev-0/w-600/h-337/f-jpg/s-a82b6fe62bb77271306dcd2871379b57eb120bf8.jpg",
                            ProductName = "Sagopa Kajmer ",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2296)
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2297),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Fucs Huzur N'Darem ",
                            ProductFullPath = "Fullpath1",
                            ProductImageUrl = "https://i.ytimg.com/vi/KIfSEYLQqGk/hqdefault.jpg",
                            ProductName = "Fuchs & Huzur Nedarem",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2298)
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 1,
                            CreatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2299),
                            IsActive = true,
                            ProductDemoPath = "demopath1",
                            ProductDescription = "Ceza & Killa Hakan 2009 Efsane Albüm & Düet ",
                            ProductFullPath = "Fullpath1",
                            ProductImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Fuat_Ergin.jpg/330px-Fuat_Ergin.jpg",
                            ProductName = "Fuat Ergin & Suvariler ",
                            UpdatedDate = new DateTime(2023, 12, 25, 17, 55, 16, 66, DateTimeKind.Local).AddTicks(2300)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.MusicEntities.ProductCategories", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Product", b =>
                {
                    b.HasOne("TrendMusic.ECommerce.Entities.Concrete.Identity.AppUser", "ProductOwner")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductOwner");
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("TrendMusic.ECommerce.Entities.Concrete.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
